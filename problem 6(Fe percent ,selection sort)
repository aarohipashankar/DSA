#include<iostream>
using namespace std;
class sort
{
 float m[30];
 int i,j,n;
public:
 void insert()
 {
  cout<<"ENTER NUMBER OF STUDENTS:"<<endl;
  cin>>n;
  cout<<"ENTER MARKS:"<<endl;
  for(i=0;i<n;i++)
  {
   cin>>m[i];
  }
 }
 void display()
 {
  cout<<"ENTERED MARKS ARE:"<<endl;
  for(i=0;i<n;i++)
  cout<<m[i]<<endl;
 }

 void bubble()
 {
  float temp;
  for(i=0;i<n-1 ;i++)
  {
   for(j=0;j<(n-1)-i;j++)
   {
    if(m[j]>m[j+1])
    {
     temp=m[j];
     m[j]=m[j+1];
     m[j+1]=temp;
    }
   }
  }
cout<<"TOP FIVE:"<<endl;
for(i=n-1;i>=(n-5);i--)
{
cout<<m[i]<<endl;

}
}
void selection()
{
int min;
float temp;
for(i=0;i<(n-1);i++)
   {
   min=i;
   for(j=i+1;j<n;j++)
   {
    if(m[j]<m[min])
    {
     min=j;
    }
   }
    temp=m[i];
    m[i]=m[min];
    m[min]=temp;

  }
  cout<<"TOP FIVE:"<<endl;
  for(i=n-1;i>= (n-5);i--)
  {
   cout<<m[i]<<endl;
  }
 }
void insertion()
{
int key,j;
for(int i=1;i<(n-1);i++){
key=m[i];
j=1;
while(j>0&&m[j-1]>key){
m[j]=m[j-1];
j--;
}
m[j]=key;
}
for(i=n-1;i>= (n-5);i--)
  {
   cout<<m[i]<<endl;
  }
}
void shell(){
for (int gap = n/2; gap > 0; gap /= 2)
{
for (int i = gap; i < n; i += 1)
{
int temp = m[i];
int j;
for (j = i; j >= gap && m[j - gap] > temp; j -= gap){
m[j] = m[j - gap];
}
m[j] = temp;
}
}
for (int i=0; i<n; i++){
cout << m[i] << " ";
}
}
};
int main()
{
 sort s;
 int ch,x;
 cout<<"LIST OF TOP FIVE STUDENTS:"<<endl;
 do
 {
 cout<<"1.CREATE \n2.DISPLAY\n3.TOP FIVE BY BUBBLE SORT\n4.TOP FIVE BY INSERTION SORT\n5.Insertion sort\n6. Shell Sort\nENTER CHOICE:"<<endl;
  cin>>ch;
  switch(ch)
  {
  case 1:
   s.insert();
   break;
  case 2:
   s.display();
   break;
  case 3:
   s.bubble();
   break;
  case 4:
   s.selection();
   break;
   case 5:
   s.insertion();
   break;
   case 6:
   s.shell();
   break;
  default:
   cout<<"INVALID CHOICE!"<<endl;
  }
  cout<<"DO YOU WANT TO CONTINUE? 1.YES 2.NO"<<endl;
  cin>>x;
 }while(x==1);
 return 0;
}


Lab assignment 7

#include <iostream>
using namespace std;
int partition(float x[100],int lb,int ub)
{
float a,temp;
int down,up;
a=x[lb]; //a mai 0 index val
down=lb; //
up=ub; //
while(down<up)
{
while (x[down]<=a && down<up)
down++;
while(x[up]>a)
up--;

if(down<up)
{
temp=x[down];
x[down]=x[up];
x[up]=temp;
}
}
x[lb]=x[up];
x[up]=a;
return up;
}
void quicksort(float x[100],int lb,int ub){
int j;
if(lb<ub)
{
j=partition(x,lb,ub);
quicksort(x,lb,j-1);
quicksort(x,j+1,ub);
}
}
int main()
{
float arr[100];
int i,n;
cout<<"\n enter no of student:";
cin>>n;
cout<<"\n enter "<<n<<" student are:";
for(i=0;i<n;i++)
cin>>arr[i];
quicksort(arr,0,n-1);
cout<<"\n after sort, students are:";
for(i=0;i<n;i++)
cout<<arr[i]<<"\t"; return 0;}
Lab assignment 8

#include <iostream>
#include<stdlib.h>
using namespace std;
class node
{ public:
node* next;
node* prev;
int seat,way;
string id;
int status;
};
class cinemax
{
public:
node* head,* tail ,* temp;
cinemax()
{
head=NULL;
}
void create_list();
void display();
void book();
void cancel();
void avail();

};
void cinemax::create_list()
{
int i=1;
temp=new node;
temp->seat=1;
temp->status=0;
temp->id="null";
tail=head=temp;
for(int i=2;i<=70;i++)
{
node *p;
p= new node;
p->seat=i;
p->status=0;
p->id="null";
tail->next=p;
p->prev=tail;
tail=p;
tail->next=head;
head->prev=tail;

}
}
void cinemax::display()
{
{ int r=1;
node* temp;
temp=head;
int count=0;
cout<<"\n------------------------------------------------------------------------------------\n";
cout<<" Screen";
this; way "\n";
cout<<"------------------------------------------------------------------------------------\n";
while(temp->next!=head)
{
if(temp->seat/10==0)
cout<<"S0"<<temp->seat<<" :";
else
cout<<"S"<<temp->seat<<" :";

if(temp->status==0)
cout<<"|___| ";
else
cout<<"|_B_| ";
count++;
if(count%7==0)
{
cout<<endl;
r++;
}
temp=temp->next;
}
cout<<"S"<<temp->seat<<" :";
if(temp->status==0)
cout<<"|___| ";
else
cout<<"|_B_| ";
}
}
void cinemax::book()
{ int x;
string y;
label:
cout<<"\n\n\nEnter seat number to be booked\n";
cin>>x;
cout<<"Enter your ID number\n";
cin>>y;
if(x<1||x>70)
{
cout<<"Enter correct seat number to book (1-70)\n";
goto label;
}
node *temp;
temp=new node;
temp=head;
while(temp->seat!=x)
{
temp=temp->next;
}

if(temp->status==1)
cout<<"Seat already booked!\n";
else{
temp->status=1;
temp->id=y;
cout<<"Seat "<<x<<" booked!\n";
}

}
void cinemax::cancel()
{
int x;
string y;
label1:
cout<<"Enter seat number to cancel booking\n";
cin>>x;
cout<<"Enter you ID\n";
cin>>y;
if(x<1||x>70)
{
cout<<"Enter correct seat number to cancel (1-70)\n";
goto label1;
}
node *temp;
temp=new node;
temp=head;
while(temp->seat!=x)
{
temp=temp->next;
}
if(temp->status==0)
{
cout<<"Seat not booked yet!!\n";
}
else
{
if(temp->id==y)
{
temp->status=0;
cout<<"Seat Cancelled!\n";
}

else
cout<<"Wrong User ID !!! Seat cannot be cancelled!!!\n";
}
}
void cinemax::avail()
{
int r=1;
node* temp;
temp=head;
int count=0;
cout<<"\n\n\n\n";
cout<<"\n------------------------------------------------------------------------------------\n";
cout<<" Screen this way \n";
cout<<"------------------------------------------------------------------------------------\n";
while(temp->next!=head)
{
{
if(temp->seat/10==0)
cout<<"S0"<<temp->seat<<" :";
else
cout<<"S"<<temp->seat<<" :";
if(temp->status==0)
cout<<"|___| ";
else if(temp->status==1)
cout<<" ";

count++;
if(count%7==0)

{

cout<<endl;

}

}
temp=temp->next;
}
if(temp->status==0)
{
cout<<"S"<<temp->seat<<" :";

if(temp->status==0)
cout<<"|___| ";
}

}
int main()
{ cinemax obj;
obj.create_list();
int ch;
char c='y';
while(c=='y')
{ obj.display();
cout<<"\n*********************************************\n";
cout<<" CINEMAX MOVIE THEATRE\n";
cout<<"*********************************************\n";
cout<<"\nEnter Choice\n1.Current SeatStatus\n2.Book Seat \n3.Available Seat\n4.CancelSeat\n";
cin>>ch;
switch(ch)
{
case 1:obj.display();
break;
case 2: obj.book();
break;
case 3:obj.avail();
break;
case 4: obj.cancel();
break;
default: cout<<"Wrong choice input\n";
}
cout<<"\nDo you want to perform any other operation : (y/n)\n";
cin>>c;
}
return 0;
}

